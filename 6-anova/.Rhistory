dane1 = cbind(data=line1, group=1)
dane2 = cbind(data=line2, group=2)
dane3 = cbind(data=line3, group=3)
dane1
dane2
dane3
daneX = rbind(dane1, dane2, dane3)
daneX
dane
dane1
daneX
kruskal.test(data ~ group, data = daneX)
wyniki = c(line1,line2,line3)
wyniki
line1
n = length(line1)
obiekty=c(rep(1,n),rep(2,n),rep(3,n))
kruskal.test(wyniki ~ obiekty)
obiekty
wyniki
obiekty
dane = read.csv("zadania/task_8.csv", sep = ";", dec = ",")
dane
firma1 = dane$Bristol_Myers
firma2 = dane$Eli_Lilly
firma3 = dane$Pfizer
firma1
firma2
firma3
k1 = cbind(kat = 1:4, firma = 1, dane = firma1)
k2 = cbind(kat = 1:4, firma = 2, dane = firma2)
k3 = cbind(kat = 1:4, firma = 3, dane = firma3)
k1
daneX = as.data.frame(rbind(k1, k2, k3))
daneX
class(daneX)
friedman.test(daneX$dane, daneX$firma, daneX$kat)
dane = read.csv("zadania/task_9.csv", sep = ";", dec = ",")
dane
refs = dane$References
perf = dane$JobPerformance
refs
perf
cor.test(refs, perf, method="spearman", alternative = "greater")
setwd("~/room/put/statystyka/statystyka-repo/7-regresja")
urzadzenie = read.csv("Reg_urzadzenie.csv",sep=";")
urzadzenie
efektywnosc = urzadzenie$efektywnosc
zywotnosc = urzadzenie$zywotnosc
efektywnosc
zywotnosc
plot(efektywnosc, zywotnosc, pch = 20,
xlab = "Efektywność urządzenia", ylab = "Żywotność urządzenia",
main = "Zależność żywotności od efektywności urządzenia")
cov(efektywnosc, zywotnosc)
cor(efektywnosc, zywotnosc)
urzadzenie = read.csv("Reg_urzadzenie.csv",sep=";")
urzadzenie
efektywnosc = urzadzenie$efektywnosc
zywotnosc = urzadzenie$zywotnosc
efektywnosc
zywotnosc
plot(efektywnosc, zywotnosc, pch = 20,
xlab = "Efektywność urządzenia", ylab = "Żywotność urządzenia",
main = "Zależność żywotności od efektywności urządzenia")
cov(efektywnosc, zywotnosc)
cor(efektywnosc, zywotnosc)
prosta = lm(zywotnosc~efektywnosc)
prosta
b = prosta$coefficients[1]
b
a = prosta$coefficients[2]
a
plot(efektywnosc, zywotnosc, pch = 20,
xlab = "Efektywność urządzenia", ylab = "Żywotność urządzenia",
main = "Zależność żywotności od efektywności urządzenia")
abline(prosta, col="red")
cor(refs, perf)
cor.test(refs, perf, method="spearman", alternative = "greater")
plot(refs, perf)
prosta = lm(perf~refs)
prosta
b = prosta$coefficients[1]
b
a = prosta$coefficients[2]
abline(prosta, col="red")
dane = read.csv("zadania/task_9.csv", sep = ";", dec = ",")
dane
cor(refs, perf)
cor.test(refs, perf, method="spearman", alternative = "greater")
### BONUS do zadania 9
refs = dane$References
dane = read.csv("zadania/task_10.csv", sep = ";", dec = ",")
dane
setwd("~/room/put/statystyka/statystyka-repo/7-regresja")
dane = read.csv("zadania/task_10.csv", sep = ";", dec = ",")
dane
setwd("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne")
dane = read.csv("zadania/task_10.csv", sep = ";", dec = ",")
dane
dane = read.csv("zadania/task_9.csv", sep = ";", dec = ",")
dane
refs = dane$References
perf = dane$JobPerformance
refs
perf
cor.test(refs, perf, method="spearman", alternative = "greater")
dane = read.csv("zadania/task_10.csv", sep = ";", dec = ",")
dane
missed
missed = dane$WorkHoursMissed
wages = dane$AnnulWages
missed
wages
dane
setwd("~/room/put/statystyka/statystyka-repo/5-hipotezy")
T = 16 # liczba sukcesów
n = 1200 # liczba wszystkiego : )
phat = T/n
alfa = 0.05
p0 = 0.02
z = (phat-p0)/sqrt(p0*(1-p0)/n)
z
qnorm(1-alfa)
binom.test(T, n, p = 0.02, alternative = "less")
prop.test(T, n, p = 0.02, alternative = "less")
binom.test(T, n, p = 0.02, alternative = "less")
prop.test(T, n, p = 0.02, alternative = "less")
mikrometr = read.csv("Anova_mikrometr.csv",sep=";", dec=",")
setwd("~/room/put/statystyka/statystyka-repo/6-anova")
mikrometr = read.csv("Anova_mikrometr.csv",sep=";", dec=",")
mikrometr
length(na.omit(mikrometr)$mikrometrI)
obiekty = rep(names(mikrometr),
c(length(na.omit(mikrometr$mikrometrI)),
length(na.omit(mikrometr$mikrometrII)),
length(na.omit(mikrometr$mikrometrIII))))
obiekty
wyniki = c(na.omit(mikrometr$mikrometrI), na.omit(mikrometr$mikrometrII), na.omit(mikrometr$mikrometrIII))
wyniki
length(wyniki)
mikrometrTest = data.frame(wyniki, obiekty)
mikrometrTest
model = lm(wyniki~obiekty)
model
anova(model)
mikrometr=read.csv("Anova_mikrometr.csv",sep=";", dec=",")
# H0: Wybór mikrometru nie ma wpływu na uzyskane wyniki: mu1 = mu2 = mu3
# H1: ~H0
# nie można zrobić, tak jak w pierwszym zadaniu, bo miejscami są puste komórki
metoda=rep(names(mikrometr),c(length(na.omit(mikrometr$mikrometrI)),
length(na.omit(mikrometr$mikrometrII)),
length(na.omit(mikrometr$mikrometrIII))))
wyniki=c(na.omit(mikrometr$mikrometrI),
na.omit(mikrometr$mikrometrII),
na.omit(mikrometr$mikrometrIII))
model=lm(wyniki~metoda)
anova(model)
alpha=0.05
# Sposób 1:
n=length(wyniki) # liczba pomiarów
k=length(mikrometr[1,]) # liczba kategorii
qf(1-alpha,k-1,n-k) # 3,885
sportowcy=read.csv("Anova_sportowcy.csv",sep=";")
metoda
wyniki
# H0: Wybór mikrometru nie ma wpływu na uzyskane wyniki: mu1 = mu2 = mu3
# H1: ~H0
# nie można zrobić, tak jak w pierwszym zadaniu, bo miejscami są puste komórki
mikrometr
cisnienie=read.csv("Anova_cisnienie.csv",sep=";")
alpha=0.05
# do każdej komórki z tabelki przyporządkowuje jakie było ciśnienie
metoda=rep(names(cisnienie),each=length(cisnienie$Niskie))
metoda
cisnienie
# wypisuje wszystkie obserwacje po kolei od niskich do bardzo silnych w takiej kolejnosci
wyniki=c(cisnienie$Niskie,cisnienie$Srednie,cisnienie$Silne,cisnienie$BardzoSilne)
wyniki
metoda
#zamiast tabelki jest wszystko w pionie: wyniki-metoda
cisnienieTest=data.frame(wyniki,metoda)
cisnienieTest
bartlett.test(wyniki~metoda,cisnienieTest)
n=length(wyniki) # liczba pomiarów
k=length(cisnienie[1,]) # liczba kategorii
model=lm(wyniki~metoda)
n
k
model
anova(model) # F-value = 2.2665
mikrometr=read.csv("C:/Users/OEM/OneDrive/Dokumenty/uniStuff/statystyka/laby/Anova_mikrometr.csv",sep=";", dec=",")
mikrometr=read.csv("Anova_mikrometr.csv",sep=";", dec=",")
# H0: Wybór mikrometru nie ma wpływu na uzyskane wyniki: mu1 = mu2 = mu3
# H1: ~H0
# nie można zrobić, tak jak w pierwszym zadaniu, bo miejscami są puste komórki
mikrometr
metoda=rep(names(mikrometr),c(length(na.omit(mikrometr$mikrometrI)),
length(na.omit(mikrometr$mikrometrII)),
length(na.omit(mikrometr$mikrometrIII))))
wyniki=c(na.omit(mikrometr$mikrometrI),
na.omit(mikrometr$mikrometrII),
na.omit(mikrometr$mikrometrIII))
metoda
wyniki
gc()
chomiki = read.csv("Anova_chomiki.csv",sep=";",dec=",")
chomiki
chomiki = read.csv("Anova_chomiki.csv",sep=";",dec=",")
chomiki
obiekty = rep(names(mikrometr),
c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III))))
obiekty
obiekty = rep(names(chomiki),
c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III))))
obiekty
chomiki = read.csv("Anova_chomiki.csv",sep=";",dec=",")
chomiki
chomiki$I
obiekty = rep(names(chomiki),
c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III))))
mikrometr = read.csv("Anova_mikrometr.csv",sep=";", dec=",")
mikrometr
length(na.omit(mikrometr)$mikrometrI)
obiekty = rep(names(mikrometr),
c(length(na.omit(mikrometr$mikrometrI)),
length(na.omit(mikrometr$mikrometrII)),
length(na.omit(mikrometr$mikrometrIII))))
obiekty
chomiki = read.csv("Anova_chomiki.csv",sep=";",dec=",")
chomiki
chomiki = read.csv("Anova_chomiki.csv",sep=";")
chomiki
obiekty = rep(names(chomiki),
c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III))))
metoda=rep(names(chomiki),c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III)),
length(na.omit(chomiki$IV))))
obiekty = rep(names(chomiki),
c(length(na.omit(chomiki$I)),
length(na.omit(chomiki$II)),
length(na.omit(chomiki$III)),
length(na.omit(chomiki$IV))))
obiekty
wyniki = c(chomiki$I, chomiki$II, chomiki$III, chomiki$IV)
wyniki
wyniki = c(na.omit(chomiki$I), na.omit(chomiki$II), na.omit(chomiki$III), na.omit(chomiki$IV))
wyniki
chomikiTest = data.frame(wyniki, obiekty)
chomikiTest
bartlett.test(wyniki~obiekty, chomikiTest)
model = lm(wyniki~obiekty)
anova(model)
TukeyHSD(aov(wyniki~obiekty), ordered = TRUE)
setwd("~/room/put/statystyka/statystyka-repo/7-regresja")
dane_arszenik = read.csv("Reg_arszenik.csv", sep = ";", dec = ",")
dane_arszenik
pH = dane_arszenik$pH
pH
arszenik = dane_arszenik$arszenik
plot(pH, arszenik, pch = 20,
xlab = "zakwaszenie gleby", ylab = "% ilość arszeniku",
main = "zależność między zakwaszeniem gleby a ilością usuniętego arszeniku")
dane_arszenik
setwd("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne")
dane=read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_1.csv",sep=";",dec=",")
dane
dane=read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_2.csv",sep=";",dec=",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_3.csv",sep=";",dec=",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_4.csv", sep=";", dec=",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_5.csv", sep=";", dec=",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_8.csv", sep = ";", dec = ",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_9.csv", sep = ";", dec = ",")
setwd("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne")
dane=read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/Reg_chemikalia.csv",sep=";",dec=",")
setwd("~/room/put/statystyka/statystyka-repo/7-regresja")
dane=read.csv("~/room/put/statystyka/statystyka-repo/7-regresja/Reg_chemikalia.csv",sep=";",dec=",")
urzadzenie=read.csv("~/room/put/statystyka/statystyka-repo/7-regresja/Reg_urzadzenie.csv",sep=";",dec=",")
urzadzenie
urzadzenie = read.csv("~/room/put/statystyka/statystyka-repo/7-regresja/Reg_urzadzenie.csv",sep=";")
urzadzenie
dane_arszenik = read.csv("~/room/put/statystyka/statystyka-repo/7-regresja/Reg_arszenik.csv", sep = ";", dec = ",")
setwd("~/room/put/statystyka/statystyka-repo/8-test-chi2")
dane=read.csv("~/room/put/statystyka/statystyka-repo/8-test-chi2/normalnosc_ozon.csv",sep=";", dec=",")
dane
dane=read.csv("~/room/put/statystyka/statystyka-repo/8-test-chi2/normalnosc_punkty.csv",sep=";", dec=",")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_9.csv", sep = ";", dec = ",")
dane
refs = dane$References
perf = dane$JobPerformance
refs
perf
cor.test(refs, perf, method="spearman", alternative = "greater")
### BONUS do zadania 9
cor(refs, perf)
plot(refs, perf)
prosta = lm(perf~refs)
prosta
b = prosta$coefficients[1]
b
a = prosta$coefficients[2]
a
abline(prosta, col="red")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_10.csv", sep = ";", dec = ",")
dane
dane10 = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_10.csv", sep = ";", dec = ",")
dane10
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", alternative = "greater")
# (x, y)
cor.test(refs, perf, method="spearman", alternative = "two.sided")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_9.csv", sep = ";", dec = ",")
dane
refs = dane$References
perf = dane$JobPerformance
refs
perf
# (x, y)
cor.test(refs, perf, method="spearman", alternative = "two.sided")
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_9.csv", sep = ";", dec = ",")
dane
refs = dane$References
perf = dane$JobPerformance
refs
perf
# (x, y)
cor.test(refs, perf, method="spearman", alternative = "greater")
### BONUS do zadania 9
cor(refs, perf)
dane10 = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_10.csv", sep = ";", dec = ",")
dane10
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", alternative = "greater")
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", alternative = "two.sided")
greater
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", alternative = "two.sided")
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", exact=F, alternative = "two.sided")
cor.test(dane10$WorkHoursMissed, dane10$AnnulWages, method="spearman", alternative = "two.sided")
##### ZADANIE 1
chemikalia = read.csv("~/room/put/statystyka/statystyka-repo/7-regresja/Reg_chemikalia.csv",sep=";")
chemikalia
surowiec = chemikalia$surowiec
produkt = chemikalia$produkt
plot(surowiec, produkt, pch=20, xlab = "Ilość zużytego surowca", ylab = "Końcowa ilość produktu", main = "Zależność między ilością zużytego surowca a ilością produktu")
cov(surowiec, produkt)
### c)
cor(surowiec, produkt)
prosta = lm(produkt~surowiec) # KOLEJNOŚĆ MA ZNACZENIE (y~x)
prosta
b = prosta$coefficients[1]
b
a = prosta$coefficients[2]
a
### d)
abline(prosta)
### g)
predict(prosta, data.frame(surowiec = 20))
### h)
predict(prosta, data.frame(surowiec = 15))
res = summary(prosta)
res
res$r.squared # 0.8270381
### j)
resAnova = anova(prosta)
alfa = 0.05
resAnova
### sposób 1
resAnova = anova(prosta)
alfa = 0.05
resAnova
obserwowane=c(122,85,76,17)
oczekiwane=c(0.38,0.32,0.23,0.07)
alfa=0.1
chisq.test(obserwowane, p=oczekiwane)
T = 300 # liczba sukcesów
n = 500 # liczba wszystkiego : )
n = 500 # liczba wszystkiego
phat = T/n
alfa = 0.07
p0 = 0.46
prop.test(T, n, p = 0.46, alternative = "two.sided")
technologia=read.csv("ANOVA_technologia.csv",sep=";", dec=",")
setwd("~/room/put/statystyka/statystyka-repo/kolokwium 2")
technologia=read.csv("ANOVA_technologia.csv",sep=";", dec=",")
technologia
setwd("~/room/put/statystyka/statystyka-repo/6-anova")
cisnienie = read.csv("Anova_cisnienie.csv",sep=";",dec=",")
cisnienie
metoda = rep(names(cisnienie), each=length(cisnienie$Niskie))
metoda
wyniki = c(cisnienie$Niskie, cisnienie$Srednie, cisnienie$Silne, cisnienie$BardzoSilne)
wyniki
cisnienie
technologia
metoda=rep(names(technologia),c(length(na.omit(technologia$T1)),
length(na.omit(technologia$T2)),
length(na.omit(technologia$T3))))
wyniki=c(na.omit(technologia$T1),
na.omit(technologia$T2),
na.omit(technologia$T3))
metoda
wyniki
#zamiast tabelki jest wszystko w pionie: wyniki-metoda
technologiaTest=data.frame(wyniki,metoda)
technologiaTest
bartlett.test(wyniki~metoda,cisnienieTest)
#zamiast tabelki jest wszystko w pionie: wyniki-metoda
technologiaTest=data.frame(wyniki,metoda)
technologiaTest
bartlett.test(wyniki~metoda,technologiaTest)
model=lm(wyniki~metoda)
anova(model)
alpha=0.05
technologia=read.csv("~/room/put/statystyka/statystyka-repo/kolokwium 2/ANOVA_technologia.csv",sep=";", dec=",")
technologia
metoda=rep(names(technologia),c(length(na.omit(technologia$T1)),
length(na.omit(technologia$T2)),
length(na.omit(technologia$T3))))
wyniki=c(na.omit(technologia$T1),
na.omit(technologia$T2),
na.omit(technologia$T3))
metoda
wyniki
#zamiast tabelki jest wszystko w pionie: wyniki-metoda
technologiaTest=data.frame(wyniki,metoda)
technologiaTest
bartlett.test(wyniki~metoda,technologiaTest)
model=lm(wyniki~metoda)
anova(model)
alpha=0.05
alfa=0.05
TukeyHSD(aov(wyniki~metoda), ordered=TRUE)
tlen = read.csv("~/room/put/statystyka/statystyka-repo/kolokwium 2/Reg_tlen.csv",sep=";", dec =",")
tlen
tlendane = read.csv("~/room/put/statystyka/statystyka-repo/kolokwium 2/Reg_tlen.csv",sep=";", dec =",")
tlendane
temperatura = tlendane$temperatura
tlen = tlendane$tlen
temperatura
tlen
### a)
cor(temperatura, tlen)
### a)
plot(temperatura, tlen, pch=20, xlab = "Temperatura", ylab = "Zawartość tlenu", main = "Zależność między temperaturą a zawartością tlenu")
### d)
prosta = lm(tlen~temperatura)
prosta
b = prosta$coefficients[1]
b
a = prosta$coefficients[2]
a
### e)
abline(prosta)
### g)
predict(prosta, data.frame(temperatura = 15))
n = 70
obserwowane=c(25,21,20,4)
oczekiwane=c(0.35,0.32,0.18,0.15)
alfa=0.07
chisq.test(obserwowane, p=oczekiwane)
n = 70
obserwowane=c(25,21,20,4)
oczekiwane=c(0.35,0.32,0.18,0.15)
alfa=0.07
chisq.test(obserwowane, p=oczekiwane)
dane = read.csv("~/room/put/statystyka/statystyka-repo/9-testy-nieparametryczne/zadania/task_5.csv", sep=";", dec=",")
dane
dane = read.csv("~/room/put/statystyka/statystyka-repo/kolokwium 2/soki.csv", sep=";", dec=",")
dane
line1 = dane$line1
line2 = dane$line2
line3 = dane$line3
line1
line2
line1 = dane$firma1
line2 = dane$firma2
line3 = dane$firma3
line1
line2
line3
dane1 = cbind(data=line1, group=1)
dane2 = cbind(data=line2, group=2)
dane3 = cbind(data=line3, group=3)
dane1
dane2
dane3
daneX = rbind(dane1, dane2, dane3)
daneX
kruskal.test(data ~ group, data = daneX)
dane
line1 = dane$firma1
line2 = dane$firma2
line3 = dane$firma3
line1
line2
line3
dane1 = cbind(data=line1, group=1)
dane2 = cbind(data=line2, group=2)
dane3 = cbind(data=line3, group=3)
dane1
dane2
dane3
daneX = rbind(dane1, dane2, dane3)
daneX
kruskal.test(data ~ group, data = daneX)
