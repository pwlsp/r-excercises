library(TeachingDemos)
chi = sigma.test(diamenty, conf.level = 0.95)
chi
ci = chi$conf.int
ci
l = sqrt(ci[[1]])
l
p = sqrt(ci[[2]])
p
# współczynnik ufności to 98%
alpha=1-0.98
zsum.test(mu,sig,n,conf.level=0.98)
# ZAD 9
# dane próby
n=365
mu=102
sig=sqrt(81)
# współczynnik ufności to 98%
alpha=1-0.98
zsum.test(mu,sig,n,conf.level=0.98)
# NA ODWRÓT
sig = 0.3
error = 0.1
alpha = 0.1
n = ((qnorm(1-alpha/2)*sig)/error)^2
print(n)
error = 0.01
alpha = 0.1
n = ((qnorm(1-alpha/2)*sig)/error)^2
print(n)
# NA ODWRÓT
sig = 0.3
error = 0.01
alpha = 0.1
n = ((qnorm(1-alpha/2)*sig)/error)^2
print(n)
error = 0.1
alpha = 0.01
n = ((qnorm(1-alpha/2)*sig)/error)^2
print(n)
# NA ODWRÓT
sig = 0.3
error = 0.1
alpha = 0.1
n = ((qnorm(1-alpha/2)*sig)/error)^2
print(n)
L=phat-qnorm(1-alfa/2)*sqrt(phat*(1-phat))/sqrt(n)
R=phat+qnorm(1-alfa/2)*sqrt(phat*(1-phat))/sqrt(n)
# ZAD 11
# estymacja punktowa proporcji populacyjnej, to proporcja z próby
n=100
T=4 # sukcesy -> ile niedopełnionych puszek
phat=T/n #proporcja
alpha=1-0.95
L=phat-qnorm(1-alfa/2)*sqrt(phat*(1-phat))/sqrt(n)
R=phat+qnorm(1-alfa/2)*sqrt(phat*(1-phat))/sqrt(n)
L
R
binom.test(T,n,conf.level=1-alpha)
#(1,1%;9,9%)
prop.test(T,n,conf.level=1-alpha) #przybliżone; lepszy do wyznaczania hipotez
binom.test(T,n,conf.level=1-alpha)
help(binom.test)
(qnorm(1-alpha/2)/0.05)^2*phat*(1-phat)
# ZAD 13
# n nieznane i trzeba obliczyć
alpha=1-0.98
# a) wcześniej p wynosiło 0.3
phat=0.3 # proporcja z próby!!!
n = (qnorm(1-alpha/2)/0.05)^2*phat*(1-phat)
n
dane=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/powtorka/kol1.R",sep=";",dec=",")
dane=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/powtorka/dane_est.csv",sep=";",dec=",")
dane
dane=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/powtorka/dane_est.csv",sep=";",dec=",")
dane
dane=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/powtorka/dane.csv",sep=";",dec=",")
dane
energia = na.omit(dane$energia)
energia
Q2 = quantile(energia)[3]
Q2
summary(energia)
print(na.omit(oceny[,i]))
oceny$grupa.M1
elo = cut(na.omit(oceny[,i]), 3)
print(elo)
table(elo)
pie(table(elo))
print(na.omit(oceny[,i]))
print(table(na.omit(oceny[,i])))
library(arm)
#oceny=read.csv("C:/Users/student/Desktop/piotrszyszka/oceny.csv",sep=";",dec=",")
oceny=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/2-statystyka-opisowa/oceny.csv",sep=";",dec=",")
class(oceny)
#oceny=read.csv("C:/Users/student/Desktop/piotrszyszka/oceny.csv",sep=";",dec=",")
oceny=read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/2-statystyka-opisowa/oceny.csv",sep=";",dec=",")
class(oceny)
grupy=names(oceny)
print(grupy)
print(oceny)
a
a
a
a
oceny$grupa.M1
elo = cut(na.omit(oceny[,i]), 3)
print(elo)
table(elo)
pie(table(elo))
print(na.omit(oceny[,i]))
print(table(na.omit(oceny[,i])))
print(na.omit(oceny[,1]))
print(table(na.omit(oceny[,1])))
oceny$grupa.M1
elo = cut(na.omit(oceny[,1]), 3)
print(elo)
table(elo)
pie(table(elo))
elo = cut(na.omit(energia), 4)
print(elo)
table(elo)
pie(table(elo))
szereg <- table(cut(energia, seq(190,400,length=5))); szereg
#albo
elo = cut(energia, seq(190,400,length=5))
print(elo)
table(elo)
pie(table(elo))
hist(energia, xlab = "[kWh]", main = "Miesięczne zużycie energii elektrycznej",
breaks = seq(190,400,length.out=5), freq = FALSE)
dane
# dwumianowy
dbinom(x, n, p)
p = 0.4
n = 4
x = 0:4
# dwumianowy
dbinom(x, n, p)
#zad2
p <- 0.4
n <- h
h <- 4
n <- h
n <- h
X <- dbinom(0:n,n,p)
data.frame(0:n,X) #rozkład dwumianiowy o parametrach n=6 i p=0.4
# dwumianowy
X = dbinom(x, n, p)
rbind(0:4, X)
help(cat)
# b)
1 - pbinom(1, n, p)
p = 0.4
n = 4
# b)
1 - pbinom(1, n, p)
#zad2
p <- 0.4
cat("P(X>1) = ", 1-pbinom(1,n,p), "\n")
# przeżyje co najmniej 200 dni
#P(X>=200) = 1-P(X<200) = 1-P(X<=200) = 1-F(200)
1-pexp(200,lambda)
# ZAD 3
# rozkład wykładniczy, podane w poleceniu
# dane ciągłe
lambda=0.01
x=0:2
curve(dexp(x,lambda),0,800)
# przeżyje co najmniej 200 dni
#P(X>=200) = 1-P(X<200) = 1-P(X<=200) = 1-F(200)
1-pexp(200,lambda)
# ulegnie awarii przed upływem 100 dni
#P(x<100) = P(X<=100) = F(100) //ponieważ P(X=100)=0, to można to tak "skrócić"
pexp(100,lambda)
# ulegnie awarii przed upływem 500 dni
pexp(500,lambda)
#P(X>3) = 1- P(X<=3) = 1 - F(3) = 0.2865048
1 - pexp(3,lambda)
#P(2<=X>=3) = F(3) - F(2) = 0.1480934
pexp(3,lambda) - pexp(2,lambda)
#Zadanie 4 - rozkład wykładniczy
EX = 2.4
lambda = 1/EX
curve(dexp(x,lambda),0,15)
#P(X>3) = 1- P(X<=3) = 1 - F(3) = 0.2865048
1 - pexp(3,lambda)
#P(2<=X>=3) = F(3) - F(2) = 0.1480934
pexp(3,lambda) - pexp(2,lambda)
#wartość oczekiwana z całki
f=function(x){x*lambda*exp(-lambda*x)}
EX2=integrate(f,0,Inf)
print(EX2) # usunac absolute error jakos
# c)
EX = n * p
EX
p = 0.4
n = 4
# c)
EX = n * p
EX
EX <- n*p; EX
mu = 174
sig = 6
n = 50
sigma <- 6
n <- 50
#N(n*mu, sqrt(n)*sigma) rozkład całkowitego wzrostu wszystkich wylosowanych mężczyzn
cat("P(T<8550) = ", pnorm(8550, mu*n, sigma*n^.5), "\n")
# a)
dnorm(x, mu, sig)
curve(dnorm(x,mu,sig),mu-3*sig,mu+3*sig)
# μ – nieznane, σ – nieznane
# duża próba -> obliczamy (mamy) średnią i sigmę z próby oraz n
zsum.test(srednia, odchylenie, n, conf.level=0.95)
energia <- na.omit(dane[,1])
witaminaC <- na.omit(dane[,2])
chlorki <- na.omit(dane[,3])
egzamin <- na.omit(dane[,4])
moc <- na.omit(dane[,5])
kawa <- na.omit(dane[,6])
czas <- na.omit(dane[,7])
wiek <- na.omit(dane[,8])
azot <- na.omit(dane[,9])
wzrost <- na.omit(dane[,10])
h <- 4
#zad4
alpha <- 1 - (90+h)/100
t.test(moc, conf.level = 1-alpha) $ conf.int
sigma <- sd(moc)
ceiling(((qnorm(1-alpha/2)*sigma)/0.1)^2) #round
dane = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/dane.csv",sep=";",dec=",")
dane
dane = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/dane.csv",sep=";",dec=".")
dane
dane = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/dane.csv",sep=";",dec=",")
dane
dane = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/dane.csv",sep=";",dec=",")
dane
class(dane[1,1])
wiek = dane$wiek
wiek
wiek = na.omit(dane$wiek)
wiek
wiek = na.omit(dane$wiek)
wiek
wiek = na.omit(dane$wiek)
wiek
dane
length(wiek)
sd = sd(wiek)
sd
srednia = mean(wiek)
v=sd/srednia*100
print(v)
wiek
srednia = mean(wiek)
srednia
sd = sd(wiek)
sd
srednia = mean(wiek)
srednia
v=sd/srednia*100
print(v)
c = cut(energia, seq(25,45,length=3))
print(c)
c = cut(wiek, seq(25,45,length=3))
print(c)
pie(table(c))
table(c)
pie(table(c))
c = cut(wiek, seq(25,45,length=4))
print(c)
table(c)
pie(table(c))
table(c)
boxplot(table(c))
boxplot(table(c))
table(c)
# F(175) - F(170)
pnorm(175, sr, sig)
sr = 174
sig = 9
# F(175) - F(170)
pnorm(175, sr, sig)
# F(175) - F(170)
pnorm(175, sr, sig) - pnorm(170, sr, sig)
# F(175) - F(170)
pnorm(175, sr, sig) - pnorm(170, sr, sig)
curve(dnorm(x, mu, sig),mu-3*sig,mu+3*sig)
azot = dane$azot
azot
azot = na.omit(dane$azot)
azot
print(azot)
alpha = 1 - 0.97
alpha
library("TeachingDemos")
sigma.test(dane, conf.level = 1 − α)
sigma.test(dane, conf.level = 1 − alpha)
sigma.test(dane, conf.level = 1 − alpha)
sigma.test(dane, conf.level = (1 − alpha))
library("TeachingDemos")
library("TeachingDemos")
sigma.test(dane, conf.level = (1 − alpha))
sigma.test(azot, conf.level = (1 − alpha))
help(sigma.text)
install.packages("TeachingDemos")
install.packages("TeachingDemos")
library("TeachingDemos")
sigma.test(azot, conf.level = (1 − alpha))
alfa = 1 - 0.97
alfa
#install.packages("TeachingDemos")
library("TeachingDemos")
n = 20
#install.packages("TeachingDemos")
library("TeachingDemos")
chi=sigma.test(azot, conf.level = 1-alfa)
ci=chi$conf.int
l=sqrt(ci[1])
r=sqrt(ci[2])
l
r
alfa = 1-0.97
alfa
n = 20
#install.packages("TeachingDemos")
library("TeachingDemos")
chi=sigma.test(azot, conf.level = 1-alfa)
ci=chi$conf.int
l=sqrt(ci[1])
r=sqrt(ci[2])
l
r
print(azot)
boxplot(table(c))
help("boxplot")
boxplot(table(c))
table(c)
# c)
solve(table(c))
# c)
boxplot(table(c))
table(c)
typ1=c(2830, 2840, 2800, 2880, 2820)
typ2=c(2790,2720,2770,2780,2760)
t.test(typ1,typ2,var.equal = TRUE,conf.level = 0.99)
# H0: mu1-mu2 <= 0   H1: mu1-mu2 > 0
# równe wariancje
t.test(typ1,typ2,var.equal=T,mu=0,alternative = "greater")
install.packages(PairedData)
install.packages("PairedData")
var.test(typ1, typ2)
var.test(typ1, typ2, conf.level = 0.99)
prop.test(c(tAW, tT), c(nAW, nT), conf.level = 0.95)
# przykład 2
nAW = 150
nT = 100
tAW = 107
tT = 63
prop.test(c(tAW, tT), c(nAW, nT), conf.level = 0.95)
prop.test(c(tAW, tT), c(nAW, nT), alternative = "greater")
#d = (dane z prezki (różnice wartości))
t.test(d)
dane = read.csv("/home/pwlsp/room/put/statystyka/5-hipotezy/dane_hip.csv",sep=";",dec=",")
dane = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/5-hipotezy/dane_hip.csv",sep=";",dec=",")
dane
# 2
srednia = mean(wiatr)
mu0 = 4
S = sd(wiatr)
n = length(wiatr)
wiatr = na.omit(dane$wiatr)
# 2
srednia = mean(wiatr)
mu0 = 4
S = sd(wiatr)
n = length(wiatr)
t = (srednia - mu0)/(S/sqrt(n))
t
qt(1-alfa, n-1)
alfa = 0.05
qt(1-alfa, n-1)
# alternatywne 2:
t.test(wiatr, mu = mu0, alternative = "greater")
# alternatywne 2:
t.test(wiatr, mu = mu0, alternative = "greater")
alfa = 0.05
qt(1-alfa, n-1)
morze = na.omit(dane$morze)
odchylenie = 5
library(BSDA)
z.test(morze, sigma.x=odchylenie, mu = 870, alternative = "two.sided")
zsum.test(mean(blaszki), sd(blaszki), length(blaszki),
mu = 0.04, alternative = "greater", conf.level = 0.98)
blaszki = na.omit(dane$blaszki)
library(BSDA)
zsum.test(mean(blaszki), sd(blaszki), length(blaszki),
mu = 0.04, alternative = "greater", conf.level = 0.98)
zsum.test(mean(blaszki), sd(blaszki), length(blaszki),
mu = 0.04, alternative = "greater", conf.level = 0.99)
zsum.test(mean(blaszki), sd(blaszki), length(blaszki),
mu = 0.04, alternative = "greater", conf.level = 0.98)
mleko = na.omit(dane$mleko)
mleko
mu0 = 0.017
t.test(wiatr, mu = mu0, alternative = "two.sided")
mu0 = 1.7
t.test(wiatr, mu = mu0, alternative = "two.sided")
t.test(mleko, mu = mu0, alternative = "two.sided")
n=length(mleko)
Chi2 = (n-1)*var(mleko)/0.02
Chi2
qchisq(alfa, n-1)
#2
library(TeachingDemos)
#2
library(TeachingDemos)
sigma.test(mleko, sigmasq - 0.02, alternative = "less")
sigma.test(mleko, sigmasq = 0.02, alternative = "less")
T = 1600
n = 2500
phat = T/n
alpha = 0.05
p0 = 0.6
z = (phat-p0)
alfa = 0.05
z = (phat-p0)/sqrt(p0*(1-p0)/n)
z = (phat-p0)/sqrt(p0*(1-p0)/n)
qnorm(1-alfa/2)
prop.test(T, n, p = 0.6, alternative = "two.sided")
binom.test(T, n, p = 0.6, alternative = "two.sided")
prop.test(T, n, p = 0.6, alternative = "two.sided")
chomiki = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/6-hipotezy-cd/Anova_chomiki.csv",sep=";",dec=",")
cisnienie = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/6-hipotezy-cd/Anova_cisnienie.csv",sep=";",dec=",")
cisnienie
metoda = rep(names(cisnienie), each=lenght(cisnienie$Niskie))
metoda = rep(names(cisnienie), each=length(cisnienie$Niskie))
wyniki = c(cisnienie$Niskie, cisnienie$Srednie, cisnienie$Silne, cisnienie$BardzoSilne)
metoda
wyniki
cisnienieTest = data.frame(wyniki.metoda)
cisnienieTest = data.frame(wyniki, metoda)
cisnienieTest
srednie = sapply(split(cisnienieTest$wyniki, cienienieTest$metoda), mean)
srednie = sapply(split(cisnienieTest$wyniki, cisnienieTest$metoda), mean)
srednie
bartlett.test(wyniki~metoda, cisnienieTest)
model = lm(wyniki~metoda)
anova(model)
# F = 2.2665
qf(0.95, 3, 36)
qf
# F = 2.2665
qf(1-alfa, k-1, n-k)
qf(0.95, 3, 36)
k = 4
n = 40
# F = 2.2665
qf(1-alfa, k-1, n-k)
qf(0.95, 3, 36)
alfa = 0.05
k = 4
n = 40
# F = 2.2665
qf(1-alfa, k-1, n-k)
qf(0.95, 3, 36)
mikrometr = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/6-hipotezy-cd/Anova_mikrometr.csv",sep=";",dec=",")
mikrometr
mikrometr = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/6-hipotezy-cd/Anova_mikrometr.csv",sep=";",dec=",")
mikrometr
metoda = rep(names(mikrometr),
c(length(na.omit(mikrometr$mikrometrI)),
length(na.omit(mikrometr$mikrometrII)),
length(na.omit(mikrometr$mikrometrIII))
))
wyniki = c(na.omit(mikrometr$mikrometrI),
na.omit(mikrometr$mikrometrII),
na.omit(mikrometr$mikrometrIII)
)
metoda
wyniki
# zad 4
sportowcy = read.csv("/home/pwlsp/room/put/statystyka/statystyka-repo/6-hipotezy-cd/Anova_sportowcy.csv",sep=";",dec=",")
metoda = rep(names(sportowcy),
each = length(sportowcy$Niepalacy))
wyniki = c(sportowcy$Niepalacy, sportowcy$Lekkopalacy, sportowcy$Sredniopalacy, sportowcy$Duzopalacy)
wyniki
sportowcyTest = data.frame(wyniki, metoda)
model = lm(wyniki~metoda)
anova(model)
TukeyHSD(aov(wyniki~metoda), ordered=TRUE)
pwd
help
help()
getwd()
pwd
setwd("~/room/put/statystyka/statystyka-repo/8-test-chi2")
# ZAD 4
library(nortest)
dane=read.csv("normalnosc_ozon.csv",sep=";", dec=",")
dane
# ZAD 4
library(nortest)
dane=read.csv("normalnosc_punkty.csv",sep=";", dec=",")
dane
alfa=0.01
ozon=dane$punkty
ozon
# pearsona
pearson.test(ozon, adjust = FALSE)
